install.packages("~/Downloads/SDSFoundations_1.1.tgz", repos = NULL, type = .Platform$pkgType)
clear
cls
clean
identical(y,z)
y <- 1:3; z<-3:1
identical(y,z)
y ==z
y <- 1:3; z<-1:3
identical(y,z)
y==z
y <- 1:3; z<-1:4
identical(y,z)
y==z
1:3
y==z
y <- 1:3; z<-3:1
identical(y,z)
y==z
c(1,2,3)
c(1,2,3)
print(P)
library(gtools)
c = permutations(6, 2, repeats.allowed = T)
dado = expand.grid(lados=c(1:6))
Probs = c(rep(1/6, 6))
dado = data.frame(dado, c, Probs)
sub = subset(dado, (X1 + X2)%%3 ==0)
n = length(sub$X2)
P = n / nrow(c)
print(P)
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
install.packages("gtools")
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
dado = expand.grid(lados=c(1:6))
dado = expand.grid(lados=c(1:6))
dado
dado
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
dado
c
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
d
dado
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
dado
dado
dado
dado
dado
dado
clearPushBack()
cls()
clear()
dado
dado = expand.grid(lados=c(1:6))
dado
Probs
dado
dado = data.frame(dado, c, Probs)
dado
c = permutations(6, 2, repeats.allowed = T)
c
dado = data.frame(dado, c, Probs)
dado
dado
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
dado
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/playground.R')
n
sub
library(gtools)
listPerm = permutations(6,2,repeats.allowed = T)
c
listPerm
listPerm
table = expand.grid(p,prob)
table = data.frame(p,prob)
p = permutations(6,2,repeats.allowed = T)
prob = 1 / 6
table = data.frame(p,prob)
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
table = data.frame(p,prob)
table = data.frame(p,prob)
p = permutations(6,2,repeats.allowed = T)
prob = 1 / 6
table = data.frame(p,prob)
table = data.frame(p,prob)
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
source('~/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-R/probabilidades/hoja-ejercicios-3/3.R')
table
sub
mysub = subset(table,(X1+X2)%%3==0)
mysub
sum(mysub$prob)
12/36
result = length(mysub$X1)/length(p)
result
result = length(mysub$X1)/length(p$X1)
result
result = length(mysub$X1)/length(p)
result
length(mysub$X1)
length(p)
p
result = length(mysub$X1)/length(p$[,1])
result = length(mysub$X1)/length(p[1])
result
p[1]
result = length(mysub$X1)/nrow(p[1])
result
result = length(mysub$X1)/nrow(p)
result
result
s = expand.grid(H1=c("H","M"),H2=c("H","M"),H3=c("H","M"))
s
prob = rep(1/8,8)
s = data.frame(s,prob)
s
S = expand.grid(D1 = c(1:6),D2 = c(1:6))
S
Probs = rep(1/6,36)
S = data.frame(S,Probs)
S
A = subset(S,D1 == D2)
A
newProb = nrow(A)
newProb
B = subset(S,D1+D2>8)
B
return(sum(M$Probs))
Prob = function(M){
return(sum(M$Probs))
}
Prob(Interseccion(A,B))
Interseccion = function(X,Y){
t1 = length(X$D1)
t2 = length(Y$D1)
R = NULL
for (i in 1:t1) {
for (j in 1:t2) {
if(X$D1[i] == Y$D1[j] & X$D2[i] == Y$D2[j])
R = rbind(R,X$D1[i,])
}
}
return(R)
}
Prob(Interseccion(A,B))
R = rbind(R,X[i,])
Prob(Interseccion(A,B))
R = rbind(R,X[i,])
for (j in 1:t2) {
if(X$D1[i] == Y$D1[j] & X$D2[i] == Y$D2[j])
R = rbind(R,X[i,])
}
Interseccion = function(X,Y){
t1 = length(X$D1)
t2 = length(Y$D1)
R = NULL
for (i in 1:t1) {
for (j in 1:t2) {
if(X$D1[i] == Y$D1[j] & X$D2[i] == Y$D2[j])
R = rbind(R,X[i,])
}
}
return(R)
}
Prob(Interseccion(A,B))
Interseccion = function(X,Y){
t1 = length(X$D1)
t2 = length(Y$D1)
R = NULL
for (i in 1:t1) {
for (j in 1:t2) {
if(X$D1[i] == Y$D1[j] & X$D2[i] == Y$D2[j])
R = rbind(R,X[i, ])
}
}
return(R)
}
Prob(Interseccion(A,B))
Prob(Interseccion(A,B))/Prob(A)
Condicional = function(X,Y){
return(Prob(Interseccion(X,Y))/Prob(X))
}
Condicional(A,B)
Condicional = function(X,Y){
return(Prob(Interseccion(X,Y))/Prob(Y))
}
Condicional(A,B)
return(Prob(Interseccion(X,Y))/Prob(X))
Condicional(A,B)
Condicional(A,B)
Condicional = function(X,Y){
return(Prob(Interseccion(X,Y))/Prob(X))
}
Condicional(A,B)
Condicional(B,A)
Condicional(A,B)
Condicional = function(X,Y){
return(Prob(Interseccion(X,Y))/Prob(Y))
}
Condicional(B,A)
S = expand.grid(A=c("Largo","Corto"),B=("Plana","Estrella"))
S = expand.grid(A=c("Largo","Corto"),B=("Plana","Estrella"))
S
S = expand.grid(A=c("Largo","Corto"),B=("Plana","Estrella"))
S = expand.grid(A=c("Largo","Corto"),B=c("Plana","Estrella"))
S
Cant = c(40,60,15,20)
S = data.frame(S,Cant)
S
S = data.frame(S,Prob=rep(0,4))
S
S$Probs[i] = S$Cant[i]/sum(S$Cant)
S
for (i in 1:4)
S$Probs[i] = S$Cant[i]/sum(S$Cant)
S
Largo = subset(S,A=="Largo")
Corto = subset(S,A=="Corto")
Plana = subset(S,B=="Plana")
Estrella = subset(S,B=="Estrella")
S
print(Largo)
print(Corto)
print(Plana)
print(Estrella)
Prob(Largo)
Interseccion(Largo,Plana)
Interseccion(Largo,Plana)
Interseccion(Largo,Plana)
Prob = function(M){
return(sum(M$Probs))
}
Prob = function(M){
return(sum(M$Probs))
}
Interseccion = function(X,Y){
t1 = length(X$Cant)
t2 = length(Y$Cant)
R = NULL
for (i in 1:t1) {
for (j in 1:t2) {
if(X$A[i] == Y$A[j] & X$B[i] == Y$B[j])
R = rbind(R,X[i, ])
}
}
return(R)
}
Prob(Largo)
Interseccion(Largo,Plana)
Condicional = function(X,Y){
return(Prob(Interseccion(X,Y))/Prob(Y))
}
Prob(Largo)
Condicional(Largo,Plana)
Prob(Largo)
Interseccion(Largo,Plana)
Condicional(Largo,Plana)
Dependencia = function(A,B){
if(Condicional(A/B)==Prob(A)){
print("Independiente")
}
else{
print("Dependiente")
}
}
Dependencia(Largo,Plana)
Dependencia = function(A,B){
if(Condicional(A/B)==Prob(A)){
print("Independiente")
}
else{
print("Dependiente")
}
}
Prob(Largo)
Interseccion(Largo,Plana)
Condicional(Largo,Plana)
Dependencia(Largo,Plana)
if(Condicional(A,B)==Prob(A)){
print("Independiente")
}
else{
print("Dependiente")
}
Dependencia = function(A,B){
if(Condicional(A,B)==Prob(A)){
print("Independiente")
}
else{
print("Dependiente")
}
}
Condicional = function(X,Y){
return(Prob(Interseccion(X,Y))/Prob(Y))
}
Dependencia = function(A,B){
if(Condicional(A,B)==Prob(A)){
print("Independiente")
}
else{
print("Dependiente")
}
}
Prob(Largo)
Interseccion(Largo,Plana)
Condicional(Largo,Plana)
Dependencia(Largo,Plana)
print(Prob(Interseccion(Corto,Plana)))
S
Prob(Largo)
Condicional(Largo,Plana)
Dependencia(Largo,Plana)
Dependencia(Plana,Largo)
Dependencia(Largo,Estrella)
Dependencia(Largo,Plana)
Dependencia(Largo,Estrella)
Dependencia(Corto,Plana)
Dependencia(Corto,Estrella)
library(gtools)
data <- read.csv("diabetes.csv")
plot(data)
multiple.regression <- lm(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age , data=data)
getwd()
setwd("/Users/veliz/Development/workspace-vscode-mackbookpro/workspace-201901/workspace-ia/workspace-final-project")
setwd("/Users/veliz/Development/workspace-vscode-macbookpro/workspace-201901/workspace-ia/workspace-final-project")
library(gtools)
data <- read.csv("diabetes.csv")
plot(data)
multiple.regression <- lm(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age , data=data)
summary(multiple.regression)
